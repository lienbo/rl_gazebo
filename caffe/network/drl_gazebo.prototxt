name: "DRLGazebo"

layer {
  name: "drl_gazebo_images"
  type: "Input"
  top: "images"
  include { 
    phase: TEST
  }
  input_param{
    shape{
      dim: 1
      dim: 3
      dim: 240
      dim: 240
    }
  }
  transform_param {
    scale: 0.00390625
    mirror: true
    crop_size: 240
    mean_file: "./caffe/dataset/drl_gazebo_mean.binaryproto"
  }
}

layer {
  name: "drl_gazebo_states"
  type: "Input"
  top: "states"
  input_param{
    shape{
      dim: 1
      dim: 9
    }
  }
  include { 
    phase: TEST
  }
}


layer {
  name: "drl_gazebo_images"
  type: "Data"
  top: "images"
  include { 
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
    mirror: true
    crop_size: 240
    mean_file: "./caffe/dataset/drl_gazebo_mean.binaryproto"
  }
  data_param {
    source: "./caffe/dataset/train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}

layer {
  name: "drl_gazebo_states"
  type: "HDF5Data"
  top: "states"
  include { 
    phase: TRAIN
  }
  hdf5_data_param {
    source: "./caffe/dataset/train_states.txt"
    batch_size: 64
  }
}

layer {
  name: "drl_gazebo_policy"
  type: "HDF5Data"
  top: "policy"
  include { 
    phase: TRAIN
  }
  hdf5_data_param {
    source: "./caffe/dataset/train_policy.txt"
    batch_size: 64
  }
}

layer {
  name: "conv1"
  type: "Convolution"
  bottom: "images"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 20
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}

layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 4
    stride: 4
  }
}

layer {
  name: "conv2"
  type: "Convolution"
  bottom: "pool1"
  top: "conv2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}

layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}


layer {
  name: "conv3"
  type: "Convolution"
  bottom: "pool2"
  top: "conv3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 80
    kernel_size: 2
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}

layer {
  name: "pool3"
  type: "Pooling"
  bottom: "conv3"
  top: "pool3"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}


layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool3"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 500
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}

layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}

layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 6
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}


layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}


layer{
  name: "concat"
  bottom: "ip2"
  bottom: "states"
  top: "concat_output"
  type: "Concat"
  concat_param {
    axis: 1
  }
}


layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "concat_output"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}

layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}

layer {
  name: "ip4"
  type: "InnerProduct"
  bottom: "ip3"
  top: "output"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 6
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}

layer {
  name: "loss"
  type: "EuclideanLoss"
  bottom: "output"
  bottom: "policy"
  top: "loss"
  include { 
    phase: TRAIN
  }
}
